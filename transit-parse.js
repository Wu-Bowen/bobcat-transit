// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var FeedMessage = exports.FeedMessage = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var FeedHeader = exports.FeedHeader = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var FeedEntity = exports.FeedEntity = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var TripUpdate = exports.TripUpdate = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var VehiclePosition = exports.VehiclePosition = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Alert = exports.Alert = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var TimeRange = exports.TimeRange = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Position = exports.Position = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var TripDescriptor = exports.TripDescriptor = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var VehicleDescriptor = exports.VehicleDescriptor = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var EntitySelector = exports.EntitySelector = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var TranslatedString = exports.TranslatedString = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineFeedMessage()
defineFeedHeader()
defineFeedEntity()
defineTripUpdate()
defineVehiclePosition()
defineAlert()
defineTimeRange()
definePosition()
defineTripDescriptor()
defineVehicleDescriptor()
defineEntitySelector()
defineTranslatedString()

function defineFeedMessage () {
  FeedMessage.encodingLength = encodingLength
  FeedMessage.encode = encode
  FeedMessage.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.header)) throw new Error("header is required")
    var len = FeedHeader.encodingLength(obj.header)
    length += varint.encodingLength(len)
    length += 1 + len
    if (defined(obj.entity)) {
      for (var i = 0; i < obj.entity.length; i++) {
        if (!defined(obj.entity[i])) continue
        var len = FeedEntity.encodingLength(obj.entity[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.header)) throw new Error("header is required")
    buf[offset++] = 10
    varint.encode(FeedHeader.encodingLength(obj.header), buf, offset)
    offset += varint.encode.bytes
    FeedHeader.encode(obj.header, buf, offset)
    offset += FeedHeader.encode.bytes
    if (defined(obj.entity)) {
      for (var i = 0; i < obj.entity.length; i++) {
        if (!defined(obj.entity[i])) continue
        buf[offset++] = 18
        varint.encode(FeedEntity.encodingLength(obj.entity[i]), buf, offset)
        offset += varint.encode.bytes
        FeedEntity.encode(obj.entity[i], buf, offset)
        offset += FeedEntity.encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      header: null,
      entity: []
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.header = FeedHeader.decode(buf, offset, offset + len)
        offset += FeedHeader.decode.bytes
        found0 = true
        break
        case 2:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.entity.push(FeedEntity.decode(buf, offset, offset + len))
        offset += FeedEntity.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineFeedHeader () {
  FeedHeader.Incrementality = {
  "FULL_DATASET": 0,
  "DIFFERENTIAL": 1
}

  FeedHeader.encodingLength = encodingLength
  FeedHeader.encode = encode
  FeedHeader.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.gtfs_realtime_version)) throw new Error("gtfs_realtime_version is required")
    var len = encodings.string.encodingLength(obj.gtfs_realtime_version)
    length += 1 + len
    if (defined(obj.incrementality)) {
      var len = encodings.enum.encodingLength(obj.incrementality)
      length += 1 + len
    }
    if (defined(obj.timestamp)) {
      var len = encodings.varint.encodingLength(obj.timestamp)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.gtfs_realtime_version)) throw new Error("gtfs_realtime_version is required")
    buf[offset++] = 10
    encodings.string.encode(obj.gtfs_realtime_version, buf, offset)
    offset += encodings.string.encode.bytes
    if (defined(obj.incrementality)) {
      buf[offset++] = 16
      encodings.enum.encode(obj.incrementality, buf, offset)
      offset += encodings.enum.encode.bytes
    }
    if (defined(obj.timestamp)) {
      buf[offset++] = 24
      encodings.varint.encode(obj.timestamp, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      gtfs_realtime_version: "",
      incrementality: 0,
      timestamp: 0
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.gtfs_realtime_version = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found0 = true
        break
        case 2:
        obj.incrementality = encodings.enum.decode(buf, offset)
        offset += encodings.enum.decode.bytes
        break
        case 3:
        obj.timestamp = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineFeedEntity () {
  FeedEntity.encodingLength = encodingLength
  FeedEntity.encode = encode
  FeedEntity.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.id)) throw new Error("id is required")
    var len = encodings.string.encodingLength(obj.id)
    length += 1 + len
    if (defined(obj.is_deleted)) {
      var len = encodings.bool.encodingLength(obj.is_deleted)
      length += 1 + len
    }
    if (defined(obj.trip_update)) {
      var len = TripUpdate.encodingLength(obj.trip_update)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.vehicle)) {
      var len = VehiclePosition.encodingLength(obj.vehicle)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.alert)) {
      var len = Alert.encodingLength(obj.alert)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.id)) throw new Error("id is required")
    buf[offset++] = 10
    encodings.string.encode(obj.id, buf, offset)
    offset += encodings.string.encode.bytes
    if (defined(obj.is_deleted)) {
      buf[offset++] = 16
      encodings.bool.encode(obj.is_deleted, buf, offset)
      offset += encodings.bool.encode.bytes
    }
    if (defined(obj.trip_update)) {
      buf[offset++] = 26
      varint.encode(TripUpdate.encodingLength(obj.trip_update), buf, offset)
      offset += varint.encode.bytes
      TripUpdate.encode(obj.trip_update, buf, offset)
      offset += TripUpdate.encode.bytes
    }
    if (defined(obj.vehicle)) {
      buf[offset++] = 34
      varint.encode(VehiclePosition.encodingLength(obj.vehicle), buf, offset)
      offset += varint.encode.bytes
      VehiclePosition.encode(obj.vehicle, buf, offset)
      offset += VehiclePosition.encode.bytes
    }
    if (defined(obj.alert)) {
      buf[offset++] = 42
      varint.encode(Alert.encodingLength(obj.alert), buf, offset)
      offset += varint.encode.bytes
      Alert.encode(obj.alert, buf, offset)
      offset += Alert.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      id: "",
      is_deleted: false,
      trip_update: null,
      vehicle: null,
      alert: null
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.id = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found0 = true
        break
        case 2:
        obj.is_deleted = encodings.bool.decode(buf, offset)
        offset += encodings.bool.decode.bytes
        break
        case 3:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.trip_update = TripUpdate.decode(buf, offset, offset + len)
        offset += TripUpdate.decode.bytes
        break
        case 4:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.vehicle = VehiclePosition.decode(buf, offset, offset + len)
        offset += VehiclePosition.decode.bytes
        break
        case 5:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.alert = Alert.decode(buf, offset, offset + len)
        offset += Alert.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineTripUpdate () {
  var StopTimeEvent = TripUpdate.StopTimeEvent = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var StopTimeUpdate = TripUpdate.StopTimeUpdate = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  defineStopTimeEvent()
  defineStopTimeUpdate()

  function defineStopTimeEvent () {
    StopTimeEvent.encodingLength = encodingLength
    StopTimeEvent.encode = encode
    StopTimeEvent.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.delay)) {
        var len = encodings.int32.encodingLength(obj.delay)
        length += 1 + len
      }
      if (defined(obj.time)) {
        var len = encodings.int64.encodingLength(obj.time)
        length += 1 + len
      }
      if (defined(obj.uncertainty)) {
        var len = encodings.int32.encodingLength(obj.uncertainty)
        length += 1 + len
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.delay)) {
        buf[offset++] = 8
        encodings.int32.encode(obj.delay, buf, offset)
        offset += encodings.int32.encode.bytes
      }
      if (defined(obj.time)) {
        buf[offset++] = 16
        encodings.int64.encode(obj.time, buf, offset)
        offset += encodings.int64.encode.bytes
      }
      if (defined(obj.uncertainty)) {
        buf[offset++] = 24
        encodings.int32.encode(obj.uncertainty, buf, offset)
        offset += encodings.int32.encode.bytes
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        delay: 0,
        time: 0,
        uncertainty: 0
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.delay = encodings.int32.decode(buf, offset)
          offset += encodings.int32.decode.bytes
          break
          case 2:
          obj.time = encodings.int64.decode(buf, offset)
          offset += encodings.int64.decode.bytes
          break
          case 3:
          obj.uncertainty = encodings.int32.decode(buf, offset)
          offset += encodings.int32.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineStopTimeUpdate () {
    StopTimeUpdate.ScheduleRelationship = {
  "SCHEDULED": 0,
  "SKIPPED": 1,
  "NO_DATA": 2
}

    StopTimeUpdate.encodingLength = encodingLength
    StopTimeUpdate.encode = encode
    StopTimeUpdate.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.stop_sequence)) {
        var len = encodings.varint.encodingLength(obj.stop_sequence)
        length += 1 + len
      }
      if (defined(obj.stop_id)) {
        var len = encodings.string.encodingLength(obj.stop_id)
        length += 1 + len
      }
      if (defined(obj.arrival)) {
        var len = StopTimeEvent.encodingLength(obj.arrival)
        length += varint.encodingLength(len)
        length += 1 + len
      }
      if (defined(obj.departure)) {
        var len = StopTimeEvent.encodingLength(obj.departure)
        length += varint.encodingLength(len)
        length += 1 + len
      }
      if (defined(obj.schedule_relationship)) {
        var len = encodings.enum.encodingLength(obj.schedule_relationship)
        length += 1 + len
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.stop_sequence)) {
        buf[offset++] = 8
        encodings.varint.encode(obj.stop_sequence, buf, offset)
        offset += encodings.varint.encode.bytes
      }
      if (defined(obj.stop_id)) {
        buf[offset++] = 34
        encodings.string.encode(obj.stop_id, buf, offset)
        offset += encodings.string.encode.bytes
      }
      if (defined(obj.arrival)) {
        buf[offset++] = 18
        varint.encode(StopTimeEvent.encodingLength(obj.arrival), buf, offset)
        offset += varint.encode.bytes
        StopTimeEvent.encode(obj.arrival, buf, offset)
        offset += StopTimeEvent.encode.bytes
      }
      if (defined(obj.departure)) {
        buf[offset++] = 26
        varint.encode(StopTimeEvent.encodingLength(obj.departure), buf, offset)
        offset += varint.encode.bytes
        StopTimeEvent.encode(obj.departure, buf, offset)
        offset += StopTimeEvent.encode.bytes
      }
      if (defined(obj.schedule_relationship)) {
        buf[offset++] = 40
        encodings.enum.encode(obj.schedule_relationship, buf, offset)
        offset += encodings.enum.encode.bytes
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        stop_sequence: 0,
        stop_id: "",
        arrival: null,
        departure: null,
        schedule_relationship: 0
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.stop_sequence = encodings.varint.decode(buf, offset)
          offset += encodings.varint.decode.bytes
          break
          case 4:
          obj.stop_id = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          break
          case 2:
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.arrival = StopTimeEvent.decode(buf, offset, offset + len)
          offset += StopTimeEvent.decode.bytes
          break
          case 3:
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.departure = StopTimeEvent.decode(buf, offset, offset + len)
          offset += StopTimeEvent.decode.bytes
          break
          case 5:
          obj.schedule_relationship = encodings.enum.decode(buf, offset)
          offset += encodings.enum.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  TripUpdate.encodingLength = encodingLength
  TripUpdate.encode = encode
  TripUpdate.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.trip)) throw new Error("trip is required")
    var len = TripDescriptor.encodingLength(obj.trip)
    length += varint.encodingLength(len)
    length += 1 + len
    if (defined(obj.vehicle)) {
      var len = VehicleDescriptor.encodingLength(obj.vehicle)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.stop_time_update)) {
      for (var i = 0; i < obj.stop_time_update.length; i++) {
        if (!defined(obj.stop_time_update[i])) continue
        var len = StopTimeUpdate.encodingLength(obj.stop_time_update[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    if (defined(obj.timestamp)) {
      var len = encodings.varint.encodingLength(obj.timestamp)
      length += 1 + len
    }
    if (defined(obj.delay)) {
      var len = encodings.int32.encodingLength(obj.delay)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.trip)) throw new Error("trip is required")
    buf[offset++] = 10
    varint.encode(TripDescriptor.encodingLength(obj.trip), buf, offset)
    offset += varint.encode.bytes
    TripDescriptor.encode(obj.trip, buf, offset)
    offset += TripDescriptor.encode.bytes
    if (defined(obj.vehicle)) {
      buf[offset++] = 26
      varint.encode(VehicleDescriptor.encodingLength(obj.vehicle), buf, offset)
      offset += varint.encode.bytes
      VehicleDescriptor.encode(obj.vehicle, buf, offset)
      offset += VehicleDescriptor.encode.bytes
    }
    if (defined(obj.stop_time_update)) {
      for (var i = 0; i < obj.stop_time_update.length; i++) {
        if (!defined(obj.stop_time_update[i])) continue
        buf[offset++] = 18
        varint.encode(StopTimeUpdate.encodingLength(obj.stop_time_update[i]), buf, offset)
        offset += varint.encode.bytes
        StopTimeUpdate.encode(obj.stop_time_update[i], buf, offset)
        offset += StopTimeUpdate.encode.bytes
      }
    }
    if (defined(obj.timestamp)) {
      buf[offset++] = 32
      encodings.varint.encode(obj.timestamp, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    if (defined(obj.delay)) {
      buf[offset++] = 40
      encodings.int32.encode(obj.delay, buf, offset)
      offset += encodings.int32.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      trip: null,
      vehicle: null,
      stop_time_update: [],
      timestamp: 0,
      delay: 0
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.trip = TripDescriptor.decode(buf, offset, offset + len)
        offset += TripDescriptor.decode.bytes
        found0 = true
        break
        case 3:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.vehicle = VehicleDescriptor.decode(buf, offset, offset + len)
        offset += VehicleDescriptor.decode.bytes
        break
        case 2:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.stop_time_update.push(StopTimeUpdate.decode(buf, offset, offset + len))
        offset += StopTimeUpdate.decode.bytes
        break
        case 4:
        obj.timestamp = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        case 5:
        obj.delay = encodings.int32.decode(buf, offset)
        offset += encodings.int32.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineVehiclePosition () {
  VehiclePosition.VehicleStopStatus = {
  "INCOMING_AT": 0,
  "STOPPED_AT": 1,
  "IN_TRANSIT_TO": 2
}

  VehiclePosition.CongestionLevel = {
  "UNKNOWN_CONGESTION_LEVEL": 0,
  "RUNNING_SMOOTHLY": 1,
  "STOP_AND_GO": 2,
  "CONGESTION": 3,
  "SEVERE_CONGESTION": 4
}

  VehiclePosition.OccupancyStatus = {
  "EMPTY": 0,
  "MANY_SEATS_AVAILABLE": 1,
  "FEW_SEATS_AVAILABLE": 2,
  "STANDING_ROOM_ONLY": 3,
  "CRUSHED_STANDING_ROOM_ONLY": 4,
  "FULL": 5,
  "NOT_ACCEPTING_PASSENGERS": 6
}

  VehiclePosition.encodingLength = encodingLength
  VehiclePosition.encode = encode
  VehiclePosition.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.trip)) {
      var len = TripDescriptor.encodingLength(obj.trip)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.vehicle)) {
      var len = VehicleDescriptor.encodingLength(obj.vehicle)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.position)) {
      var len = Position.encodingLength(obj.position)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.current_stop_sequence)) {
      var len = encodings.varint.encodingLength(obj.current_stop_sequence)
      length += 1 + len
    }
    if (defined(obj.stop_id)) {
      var len = encodings.string.encodingLength(obj.stop_id)
      length += 1 + len
    }
    if (defined(obj.current_status)) {
      var len = encodings.enum.encodingLength(obj.current_status)
      length += 1 + len
    }
    if (defined(obj.timestamp)) {
      var len = encodings.varint.encodingLength(obj.timestamp)
      length += 1 + len
    }
    if (defined(obj.congestion_level)) {
      var len = encodings.enum.encodingLength(obj.congestion_level)
      length += 1 + len
    }
    if (defined(obj.occupancy_status)) {
      var len = encodings.enum.encodingLength(obj.occupancy_status)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.trip)) {
      buf[offset++] = 10
      varint.encode(TripDescriptor.encodingLength(obj.trip), buf, offset)
      offset += varint.encode.bytes
      TripDescriptor.encode(obj.trip, buf, offset)
      offset += TripDescriptor.encode.bytes
    }
    if (defined(obj.vehicle)) {
      buf[offset++] = 66
      varint.encode(VehicleDescriptor.encodingLength(obj.vehicle), buf, offset)
      offset += varint.encode.bytes
      VehicleDescriptor.encode(obj.vehicle, buf, offset)
      offset += VehicleDescriptor.encode.bytes
    }
    if (defined(obj.position)) {
      buf[offset++] = 18
      varint.encode(Position.encodingLength(obj.position), buf, offset)
      offset += varint.encode.bytes
      Position.encode(obj.position, buf, offset)
      offset += Position.encode.bytes
    }
    if (defined(obj.current_stop_sequence)) {
      buf[offset++] = 24
      encodings.varint.encode(obj.current_stop_sequence, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    if (defined(obj.stop_id)) {
      buf[offset++] = 58
      encodings.string.encode(obj.stop_id, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.current_status)) {
      buf[offset++] = 32
      encodings.enum.encode(obj.current_status, buf, offset)
      offset += encodings.enum.encode.bytes
    }
    if (defined(obj.timestamp)) {
      buf[offset++] = 40
      encodings.varint.encode(obj.timestamp, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    if (defined(obj.congestion_level)) {
      buf[offset++] = 48
      encodings.enum.encode(obj.congestion_level, buf, offset)
      offset += encodings.enum.encode.bytes
    }
    if (defined(obj.occupancy_status)) {
      buf[offset++] = 72
      encodings.enum.encode(obj.occupancy_status, buf, offset)
      offset += encodings.enum.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      trip: null,
      vehicle: null,
      position: null,
      current_stop_sequence: 0,
      stop_id: "",
      current_status: 2,
      timestamp: 0,
      congestion_level: 0,
      occupancy_status: 0
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.trip = TripDescriptor.decode(buf, offset, offset + len)
        offset += TripDescriptor.decode.bytes
        break
        case 8:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.vehicle = VehicleDescriptor.decode(buf, offset, offset + len)
        offset += VehicleDescriptor.decode.bytes
        break
        case 2:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.position = Position.decode(buf, offset, offset + len)
        offset += Position.decode.bytes
        break
        case 3:
        obj.current_stop_sequence = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        case 7:
        obj.stop_id = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 4:
        obj.current_status = encodings.enum.decode(buf, offset)
        offset += encodings.enum.decode.bytes
        break
        case 5:
        obj.timestamp = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        case 6:
        obj.congestion_level = encodings.enum.decode(buf, offset)
        offset += encodings.enum.decode.bytes
        break
        case 9:
        obj.occupancy_status = encodings.enum.decode(buf, offset)
        offset += encodings.enum.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineAlert () {
  Alert.Cause = {
  "UNKNOWN_CAUSE": 1,
  "OTHER_CAUSE": 2,
  "TECHNICAL_PROBLEM": 3,
  "STRIKE": 4,
  "DEMONSTRATION": 5,
  "ACCIDENT": 6,
  "HOLIDAY": 7,
  "WEATHER": 8,
  "MAINTENANCE": 9,
  "CONSTRUCTION": 10,
  "POLICE_ACTIVITY": 11,
  "MEDICAL_EMERGENCY": 12
}

  Alert.Effect = {
  "NO_SERVICE": 1,
  "REDUCED_SERVICE": 2,
  "SIGNIFICANT_DELAYS": 3,
  "DETOUR": 4,
  "ADDITIONAL_SERVICE": 5,
  "MODIFIED_SERVICE": 6,
  "OTHER_EFFECT": 7,
  "UNKNOWN_EFFECT": 8,
  "STOP_MOVED": 9
}

  Alert.encodingLength = encodingLength
  Alert.encode = encode
  Alert.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.active_period)) {
      for (var i = 0; i < obj.active_period.length; i++) {
        if (!defined(obj.active_period[i])) continue
        var len = TimeRange.encodingLength(obj.active_period[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    if (defined(obj.informed_entity)) {
      for (var i = 0; i < obj.informed_entity.length; i++) {
        if (!defined(obj.informed_entity[i])) continue
        var len = EntitySelector.encodingLength(obj.informed_entity[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    if (defined(obj.cause)) {
      var len = encodings.enum.encodingLength(obj.cause)
      length += 1 + len
    }
    if (defined(obj.effect)) {
      var len = encodings.enum.encodingLength(obj.effect)
      length += 1 + len
    }
    if (defined(obj.url)) {
      var len = TranslatedString.encodingLength(obj.url)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.header_text)) {
      var len = TranslatedString.encodingLength(obj.header_text)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.description_text)) {
      var len = TranslatedString.encodingLength(obj.description_text)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.active_period)) {
      for (var i = 0; i < obj.active_period.length; i++) {
        if (!defined(obj.active_period[i])) continue
        buf[offset++] = 10
        varint.encode(TimeRange.encodingLength(obj.active_period[i]), buf, offset)
        offset += varint.encode.bytes
        TimeRange.encode(obj.active_period[i], buf, offset)
        offset += TimeRange.encode.bytes
      }
    }
    if (defined(obj.informed_entity)) {
      for (var i = 0; i < obj.informed_entity.length; i++) {
        if (!defined(obj.informed_entity[i])) continue
        buf[offset++] = 42
        varint.encode(EntitySelector.encodingLength(obj.informed_entity[i]), buf, offset)
        offset += varint.encode.bytes
        EntitySelector.encode(obj.informed_entity[i], buf, offset)
        offset += EntitySelector.encode.bytes
      }
    }
    if (defined(obj.cause)) {
      buf[offset++] = 48
      encodings.enum.encode(obj.cause, buf, offset)
      offset += encodings.enum.encode.bytes
    }
    if (defined(obj.effect)) {
      buf[offset++] = 56
      encodings.enum.encode(obj.effect, buf, offset)
      offset += encodings.enum.encode.bytes
    }
    if (defined(obj.url)) {
      buf[offset++] = 66
      varint.encode(TranslatedString.encodingLength(obj.url), buf, offset)
      offset += varint.encode.bytes
      TranslatedString.encode(obj.url, buf, offset)
      offset += TranslatedString.encode.bytes
    }
    if (defined(obj.header_text)) {
      buf[offset++] = 82
      varint.encode(TranslatedString.encodingLength(obj.header_text), buf, offset)
      offset += varint.encode.bytes
      TranslatedString.encode(obj.header_text, buf, offset)
      offset += TranslatedString.encode.bytes
    }
    if (defined(obj.description_text)) {
      buf[offset++] = 90
      varint.encode(TranslatedString.encodingLength(obj.description_text), buf, offset)
      offset += varint.encode.bytes
      TranslatedString.encode(obj.description_text, buf, offset)
      offset += TranslatedString.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      active_period: [],
      informed_entity: [],
      cause: 1,
      effect: 8,
      url: null,
      header_text: null,
      description_text: null
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.active_period.push(TimeRange.decode(buf, offset, offset + len))
        offset += TimeRange.decode.bytes
        break
        case 5:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.informed_entity.push(EntitySelector.decode(buf, offset, offset + len))
        offset += EntitySelector.decode.bytes
        break
        case 6:
        obj.cause = encodings.enum.decode(buf, offset)
        offset += encodings.enum.decode.bytes
        break
        case 7:
        obj.effect = encodings.enum.decode(buf, offset)
        offset += encodings.enum.decode.bytes
        break
        case 8:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.url = TranslatedString.decode(buf, offset, offset + len)
        offset += TranslatedString.decode.bytes
        break
        case 10:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.header_text = TranslatedString.decode(buf, offset, offset + len)
        offset += TranslatedString.decode.bytes
        break
        case 11:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.description_text = TranslatedString.decode(buf, offset, offset + len)
        offset += TranslatedString.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineTimeRange () {
  TimeRange.encodingLength = encodingLength
  TimeRange.encode = encode
  TimeRange.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.start)) {
      var len = encodings.varint.encodingLength(obj.start)
      length += 1 + len
    }
    if (defined(obj.end)) {
      var len = encodings.varint.encodingLength(obj.end)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.start)) {
      buf[offset++] = 8
      encodings.varint.encode(obj.start, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    if (defined(obj.end)) {
      buf[offset++] = 16
      encodings.varint.encode(obj.end, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      start: 0,
      end: 0
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.start = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        case 2:
        obj.end = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function definePosition () {
  Position.encodingLength = encodingLength
  Position.encode = encode
  Position.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.latitude)) throw new Error("latitude is required")
    var len = encodings.float.encodingLength(obj.latitude)
    length += 1 + len
    if (!defined(obj.longitude)) throw new Error("longitude is required")
    var len = encodings.float.encodingLength(obj.longitude)
    length += 1 + len
    if (defined(obj.bearing)) {
      var len = encodings.float.encodingLength(obj.bearing)
      length += 1 + len
    }
    if (defined(obj.odometer)) {
      var len = encodings.double.encodingLength(obj.odometer)
      length += 1 + len
    }
    if (defined(obj.speed)) {
      var len = encodings.float.encodingLength(obj.speed)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.latitude)) throw new Error("latitude is required")
    buf[offset++] = 13
    encodings.float.encode(obj.latitude, buf, offset)
    offset += encodings.float.encode.bytes
    if (!defined(obj.longitude)) throw new Error("longitude is required")
    buf[offset++] = 21
    encodings.float.encode(obj.longitude, buf, offset)
    offset += encodings.float.encode.bytes
    if (defined(obj.bearing)) {
      buf[offset++] = 29
      encodings.float.encode(obj.bearing, buf, offset)
      offset += encodings.float.encode.bytes
    }
    if (defined(obj.odometer)) {
      buf[offset++] = 33
      encodings.double.encode(obj.odometer, buf, offset)
      offset += encodings.double.encode.bytes
    }
    if (defined(obj.speed)) {
      buf[offset++] = 45
      encodings.float.encode(obj.speed, buf, offset)
      offset += encodings.float.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      latitude: 0,
      longitude: 0,
      bearing: 0,
      odometer: 0,
      speed: 0
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.latitude = encodings.float.decode(buf, offset)
        offset += encodings.float.decode.bytes
        found0 = true
        break
        case 2:
        obj.longitude = encodings.float.decode(buf, offset)
        offset += encodings.float.decode.bytes
        found1 = true
        break
        case 3:
        obj.bearing = encodings.float.decode(buf, offset)
        offset += encodings.float.decode.bytes
        break
        case 4:
        obj.odometer = encodings.double.decode(buf, offset)
        offset += encodings.double.decode.bytes
        break
        case 5:
        obj.speed = encodings.float.decode(buf, offset)
        offset += encodings.float.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineTripDescriptor () {
  TripDescriptor.ScheduleRelationship = {
    SCHEDULED: 0,
    ADDED: 1,
    UNSCHEDULED: 2,
    CANCELED: 3
  }

  TripDescriptor.encodingLength = encodingLength
  TripDescriptor.encode = encode
  TripDescriptor.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.trip_id)) {
      var len = encodings.string.encodingLength(obj.trip_id)
      length += 1 + len
    }
    if (defined(obj.route_id)) {
      var len = encodings.string.encodingLength(obj.route_id)
      length += 1 + len
    }
    if (defined(obj.direction_id)) {
      var len = encodings.varint.encodingLength(obj.direction_id)
      length += 1 + len
    }
    if (defined(obj.start_time)) {
      var len = encodings.string.encodingLength(obj.start_time)
      length += 1 + len
    }
    if (defined(obj.start_date)) {
      var len = encodings.string.encodingLength(obj.start_date)
      length += 1 + len
    }
    if (defined(obj.schedule_relationship)) {
      var len = encodings.enum.encodingLength(obj.schedule_relationship)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.trip_id)) {
      buf[offset++] = 10
      encodings.string.encode(obj.trip_id, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.route_id)) {
      buf[offset++] = 42
      encodings.string.encode(obj.route_id, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.direction_id)) {
      buf[offset++] = 48
      encodings.varint.encode(obj.direction_id, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    if (defined(obj.start_time)) {
      buf[offset++] = 18
      encodings.string.encode(obj.start_time, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.start_date)) {
      buf[offset++] = 26
      encodings.string.encode(obj.start_date, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.schedule_relationship)) {
      buf[offset++] = 32
      encodings.enum.encode(obj.schedule_relationship, buf, offset)
      offset += encodings.enum.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      trip_id: "",
      route_id: "",
      direction_id: 0,
      start_time: "",
      start_date: "",
      schedule_relationship: 0
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.trip_id = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 5:
        obj.route_id = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 6:
        obj.direction_id = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        case 2:
        obj.start_time = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 3:
        obj.start_date = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 4:
        obj.schedule_relationship = encodings.enum.decode(buf, offset)
        offset += encodings.enum.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineVehicleDescriptor () {
  VehicleDescriptor.encodingLength = encodingLength
  VehicleDescriptor.encode = encode
  VehicleDescriptor.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.id)) {
      var len = encodings.string.encodingLength(obj.id)
      length += 1 + len
    }
    if (defined(obj.label)) {
      var len = encodings.string.encodingLength(obj.label)
      length += 1 + len
    }
    if (defined(obj.license_plate)) {
      var len = encodings.string.encodingLength(obj.license_plate)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.id)) {
      buf[offset++] = 10
      encodings.string.encode(obj.id, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.label)) {
      buf[offset++] = 18
      encodings.string.encode(obj.label, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.license_plate)) {
      buf[offset++] = 26
      encodings.string.encode(obj.license_plate, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      id: "",
      label: "",
      license_plate: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.id = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 2:
        obj.label = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 3:
        obj.license_plate = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineEntitySelector () {
  EntitySelector.encodingLength = encodingLength
  EntitySelector.encode = encode
  EntitySelector.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.agency_id)) {
      var len = encodings.string.encodingLength(obj.agency_id)
      length += 1 + len
    }
    if (defined(obj.route_id)) {
      var len = encodings.string.encodingLength(obj.route_id)
      length += 1 + len
    }
    if (defined(obj.route_type)) {
      var len = encodings.int32.encodingLength(obj.route_type)
      length += 1 + len
    }
    if (defined(obj.trip)) {
      var len = TripDescriptor.encodingLength(obj.trip)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.stop_id)) {
      var len = encodings.string.encodingLength(obj.stop_id)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.agency_id)) {
      buf[offset++] = 10
      encodings.string.encode(obj.agency_id, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.route_id)) {
      buf[offset++] = 18
      encodings.string.encode(obj.route_id, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.route_type)) {
      buf[offset++] = 24
      encodings.int32.encode(obj.route_type, buf, offset)
      offset += encodings.int32.encode.bytes
    }
    if (defined(obj.trip)) {
      buf[offset++] = 34
      varint.encode(TripDescriptor.encodingLength(obj.trip), buf, offset)
      offset += varint.encode.bytes
      TripDescriptor.encode(obj.trip, buf, offset)
      offset += TripDescriptor.encode.bytes
    }
    if (defined(obj.stop_id)) {
      buf[offset++] = 42
      encodings.string.encode(obj.stop_id, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      agency_id: "",
      route_id: "",
      route_type: 0,
      trip: null,
      stop_id: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.agency_id = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 2:
        obj.route_id = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 3:
        obj.route_type = encodings.int32.decode(buf, offset)
        offset += encodings.int32.decode.bytes
        break
        case 4:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.trip = TripDescriptor.decode(buf, offset, offset + len)
        offset += TripDescriptor.decode.bytes
        break
        case 5:
        obj.stop_id = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineTranslatedString () {
  var Translation = TranslatedString.Translation = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  defineTranslation()

  function defineTranslation () {
    Translation.encodingLength = encodingLength
    Translation.encode = encode
    Translation.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.text)) throw new Error("text is required")
      var len = encodings.string.encodingLength(obj.text)
      length += 1 + len
      if (defined(obj.language)) {
        var len = encodings.string.encodingLength(obj.language)
        length += 1 + len
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.text)) throw new Error("text is required")
      buf[offset++] = 10
      encodings.string.encode(obj.text, buf, offset)
      offset += encodings.string.encode.bytes
      if (defined(obj.language)) {
        buf[offset++] = 18
        encodings.string.encode(obj.language, buf, offset)
        offset += encodings.string.encode.bytes
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        text: "",
        language: ""
      }
      var found0 = false
      while (true) {
        if (end <= offset) {
          if (!found0) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.text = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          found0 = true
          break
          case 2:
          obj.language = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  TranslatedString.encodingLength = encodingLength
  TranslatedString.encode = encode
  TranslatedString.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.translation)) {
      for (var i = 0; i < obj.translation.length; i++) {
        if (!defined(obj.translation[i])) continue
        var len = Translation.encodingLength(obj.translation[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.translation)) {
      for (var i = 0; i < obj.translation.length; i++) {
        if (!defined(obj.translation[i])) continue
        buf[offset++] = 10
        varint.encode(Translation.encodingLength(obj.translation[i]), buf, offset)
        offset += varint.encode.bytes
        Translation.encode(obj.translation[i], buf, offset)
        offset += Translation.encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      translation: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.translation.push(Translation.decode(buf, offset, offset + len))
        offset += Translation.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
